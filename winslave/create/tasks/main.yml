---
- name: Packages
  win_chocolatey:
    name: '{{ item is mapping | ternary(item.name, item) }}'
    version: '{{ item is mapping | ternary(item.version, omit) }}'
    showlog: yes
  register: packages_result
  failed_when: >
    (packages_result.msg is defined) and
    ('0 package(s) failed.' not in packages_result.msg)
  with_items:
  - name: 'python'
    version: '2.7.6'
  - easy.install # would install python (but 0.9.9.x hangs on install)
  - pip
  - pywin32 # used to install services
  - carbon # used to grant privileges http://get-carbon.org/
  - 7zip #used to extract sources
  - name: 'git.install'
    version: '1.9.5.20150114'

# - debug:
#    var: packages_result

- name: Stat buildslave
  win_stat:
    path: '{{ buildbot_winslave_python_script_path }}\buildslave'
  register: buildbot_winslave_buildslave_result

# pip not available on Windows
- name: Buildslave
  script: 'install_buildslave.ps1'
  when: not buildbot_winslave_buildslave_result.stat.exists

- name: Generate Password
  set_fact:
    generated_slave_password: '{{ buildbot_slave_password }}'

- name: Stat Create_slave
  win_stat:
    path: '{{ buildbot_slave_basedir }}/buildbot.tac'
  register: buildbot_winslave_tac_result

- name: Create_slave
  script: >
    create_slave.ps1
    {{ buildbot_slave_basedir | replace(backslash, '/') }}
    {{ buildbot_slave_master_host }}:{{ buildbot_slave_master_port }}
    {{ buildbot_slave_name }}
    {{ generated_slave_password }}
  args:
     creates: '{{ buildbot_slave_basedir }}/buildbot.tac'
  when: not buildbot_winslave_tac_result.stat.exists

- name: Add Slave to master
  template:
    src: 'slave.yml.j2'
    dest: '{{ hostvars[buildbot_master_host].buildbot_master_slaves_dir }}/{{ buildbot_slave_name }}.yml'
  sudo: yes
  sudo_user: '{{ hostvars[buildbot_master_host].buildbot_master_user }}'
  delegate_to: '{{ buildbot_master_host }}'
  when: not buildbot_winslave_tac_result.stat.exists
  register: slave_config_result

- name: Reconfigure master
  command: 'buildbot reconfig {{ hostvars[buildbot_master_host].buildbot_master_basedir }}'
  sudo: yes
  sudo_user: '{{ hostvars[buildbot_master_host].buildbot_master_user }}'
  ignore_errors: yes # build-master is not ready on the first run
  delegate_to: '{{ buildbot_master_host }}'
  when: slave_config_result.changed

- name: service user
  script: service_user.ps1 {{ buildbot_winslave_user }}
  register: buildbot_winslave_service_user_result
  failed_when: >
    '' != buildbot_winslave_service_user_result.stderr
    or 0 != buildbot_winslave_service_user_result.rc
  changed_when: >
    'Changed' in buildbot_winslave_service_user_result.stdout
  tags:
  - winuser

- name: service
  script: >
    service.ps1 "{{ buildbot_winslave_python_script_path }}" "{{ buildbot_winslave_user }}" "{{ buildbot_winslave_password }}"
  register: buildbot_winslave_service_result
  failed_when: >
    '' != buildbot_winslave_service_result.stderr
    or 0 != buildbot_winslave_service_result.rc
    or ('Error installing service:' in buildbot_winslave_service_result.stdout)
  changed_when: >
    ('Service installed' in buildbot_winslave_service_result.stdout)

- name: Prepare Directory
  raw: >
    if not exist "{{ buildbot_slave_prepare_dir }}"
      echo created &&
      mkdir "{{ buildbot_slave_prepare_dir }}"
  register: buildbot_prepare_dir_result
  changed_when: >
    'created' in buildbot_prepare_dir_result.stdout
