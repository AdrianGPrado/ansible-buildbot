---
- name: Capture Version
  script: 'win32_os_caption.ps1'
  changed_when: false
  register: buildbot_win32_os_caption_result

- name: Kill CPU Burner
  script: 'stop_update.ps1'
  register: buildbot_winslave_kill_result
  changed_when: >
    "Killed" in buildbot_winslave_kill_result.stdout
  failed_when: >
    '' != buildbot_winslave_kill_result.stderr
    or 0 != buildbot_winslave_kill_result.rc
  tags:
  - winkill

- name: Packages
  win_chocolatey:
    name: '{{ item is mapping | ternary(item.name, item) }}'
    version: '{{ item is mapping | ternary(item.version, omit) }}'
    showlog: yes
  register: packages_result
  failed_when: >
    (packages_result.msg is defined) and
    ('0 package(s) failed.' not in packages_result.msg)
  with_items: winslave_choco_packages
  tags:
  - winpackages

- name: PyWin32
  script: 'install_pywin32.ps1'
  register: buildbot_winslave_pywin32_result
  changed_when: >
    "Installed" in buildbot_winslave_pywin32_result.stdout
  failed_when: >
    '' != buildbot_winslave_pywin32_result.stderr
    or 0 != buildbot_winslave_pywin32_result.rc
  tags:
  - pywin32

- name: Stat buildslave
  win_stat:
    path: '{{ buildbot_slave_basedir }}'
  register: buildbot_winslave_buildslave_result

- name: Buildslave
  script: 'install_buildslave.ps1'
  args:
     creates: '{{ buildbot_slave_basedir }}/buildbot.tac'
  when: not buildbot_winslave_buildslave_result.stat.exists

- name: Generate Password
  set_fact:
    generated_slave_password: '{{ buildbot_slave_password }}'

- name: Stat Create_slave
  win_stat:
    path: '{{ buildbot_slave_basedir }}/buildbot.tac'
  register: buildbot_winslave_tac_result

- name: Create_slave
  script: >
    create_slave.ps1
    {{ buildbot_slave_basedir | replace(backslash, '/') }}
    {{ buildbot_slave_master_host }}:{{ buildbot_slave_master_port }}
    {{ buildbot_slave_name }}
    {{ generated_slave_password }}
  args:
     creates: '{{ buildbot_slave_basedir }}/buildbot.tac'
  when: not buildbot_winslave_tac_result.stat.exists
  notify:
  - reconfig buildslave
  - restart buildslave

- name: Admin
  win_template:
    src: 'admin.j2'
    dest: '{{ buildbot_slave_basedir }}/info/admin'

- name: Description
  win_template:
    src: 'host.j2'
    dest: '{{ buildbot_slave_basedir }}/info/host'

- name: Service User
  script: service_user.ps1 {{ buildbot_winslave_user }}
  register: buildbot_winslave_service_user_result
  failed_when: >
    '' != buildbot_winslave_service_user_result.stderr
    or 0 != buildbot_winslave_service_user_result.rc
  changed_when: >
    'Changed' in buildbot_winslave_service_user_result.stdout
  tags:
  - winuser

- name: Service
  script: >
    service.ps1 "{{ buildbot_winslave_user }}" "{{ buildbot_winslave_password }}"
  register: buildbot_winslave_service_result
  failed_when: >
    '' != buildbot_winslave_service_result.stderr
    or 0 != buildbot_winslave_service_result.rc
    or ('Error installing service:' in buildbot_winslave_service_result.stdout)
  changed_when: >
    ('Service installed' in buildbot_winslave_service_result.stdout)

- name: Folder
  raw: >
    if not exist "{{ buildbot_slave_prepare_dir }}"
      echo created &&
      mkdir "{{ buildbot_slave_prepare_dir }}"
  register: buildbot_prepare_dir_result
  changed_when: >
    'created' in buildbot_prepare_dir_result.stdout

- name: Store facts
  set_fact:
    buildbot_win32_os_caption: "{{ buildbot_win32_os_caption_result.stdout | replace('Microsoft ', '') }}"
    buildbot_master_host: '{{ buildbot_master_host }}'
    buildbot_winslave_user: '{{ buildbot_winslave_user }}'
    buildbot_slave_basedir: '{{ buildbot_slave_basedir }}'
    buildbot_slave_prepare_dir: '{{ buildbot_slave_prepare_dir }}'
    buildbot_slave_setups: []
  tags:
  - facts
